name: Visual Regression Testing

on:
  # PR 생성 및 업데이트시 실행
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert -version
      
    - name: Run Playwright tests
      run: npx playwright test
        
    - name: Upload visual comparison results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-comparison-report
        path: |
          test-results/**/*.png
          test-results/**/*-diff.png
        retention-days: 30

    - name: Generate Optimized Visual Report and Post PR Comment
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          // 이미지 최적화 함수 (ImageMagick 사용)
          function optimizeImage(inputPath, outputPath, maxWidth = 600, quality = 50) {
            try {
              console.log(`이미지 최적화 시도: ${inputPath} -> ${outputPath}`);
              execSync(`convert "${inputPath}" -resize ${maxWidth}x -quality ${quality} -strip "${outputPath}"`, { stdio: 'inherit' });
              const success = fs.existsSync(outputPath);
              console.log(`최적화 결과: ${success ? '성공' : '실패'}`);
              return success;
            } catch (error) {
              console.error(`이미지 최적화 실패: ${inputPath} - ${error.message}`);
              return false;
            }
          }
          
          // Base64로 이미지를 인코딩하는 함수
          function imageToBase64(imagePath) {
            if (!fs.existsSync(imagePath)) {
              console.log(`이미지 파일이 존재하지 않음: ${imagePath}`);
              return null;
            }
            try {
              const imageBuffer = fs.readFileSync(imagePath);
              const base64 = `data:image/png;base64,${imageBuffer.toString('base64')}`;
              console.log(`Base64 인코딩 성공: ${imagePath} (${Math.round(base64.length/1024)}KB)`);
              return base64;
            } catch (error) {
              console.error(`Base64 인코딩 실패: ${imagePath} - ${error.message}`);
              return null;
            }
          }
          
          // 테스트 결과 찾기
          function findTestResults() {
            const testResultsDir = 'test-results';
            const results = [];
            
            console.log(`테스트 결과 디렉토리 확인: ${testResultsDir}`);
            if (!fs.existsSync(testResultsDir)) {
              console.log('test-results 디렉토리가 존재하지 않습니다.');
              return results;
            }
            
            const testDirs = fs.readdirSync(testResultsDir)
              .filter(dir => fs.statSync(path.join(testResultsDir, dir)).isDirectory());
            
            console.log(`발견된 테스트 디렉토리들: ${testDirs.join(', ')}`);
            
            for (const testDir of testDirs) {
              const testPath = path.join(testResultsDir, testDir);
              const files = fs.readdirSync(testPath);
              
              console.log(`${testDir} 디렉토리의 파일들: ${files.join(', ')}`);
              
              const screenshots = files.filter(file => 
                file.endsWith('.png') && !file.includes('-previous') && !file.includes('-diff')
              );
              
              for (const screenshot of screenshots) {
                const baseName = screenshot.replace('.png', '');
                const expectedPath = path.join('e2e', `${testDir}.test.ts-snapshots`, screenshot);
                const actualPath = path.join(testPath, screenshot);
                const diffPath = path.join(testPath, `${baseName}-diff.png`);
                
                console.log(`스크린샷 분석:`);
                console.log(`  - Expected: ${expectedPath} (존재: ${fs.existsSync(expectedPath)})`);
                console.log(`  - Actual: ${actualPath} (존재: ${fs.existsSync(actualPath)})`);
                console.log(`  - Diff: ${diffPath} (존재: ${fs.existsSync(diffPath)})`);
                
                const hasDiff = fs.existsSync(diffPath);
                
                if (hasDiff || !fs.existsSync(expectedPath)) {
                  results.push({
                    testName: `${testDir} - ${baseName}`,
                    expectedPath: fs.existsSync(expectedPath) ? expectedPath : null,
                    actualPath: actualPath,
                    diffPath: hasDiff ? diffPath : null,
                    hasChanges: true
                  });
                  console.log(`변경사항 추가: ${testDir} - ${baseName}`);
                }
              }
            }
            
            return results;
          }
          
          // 인터랙티브 HTML 생성 (최적화된 이미지 사용)
          function generateInteractiveHTML(testResult, index) {
            console.log(`\n=== ${testResult.testName} HTML 생성 시작 ===`);
            
            // 최적화된 이미지 디렉토리 생성
            const optimizedDir = 'optimized-images';
            if (!fs.existsSync(optimizedDir)) {
              fs.mkdirSync(optimizedDir, { recursive: true });
              console.log(`최적화 디렉토리 생성: ${optimizedDir}`);
            }
            
            // 이미지 최적화 및 Base64 인코딩
            let expectedBase64 = null;
            let actualBase64 = null;
            let diffBase64 = null;
            
            if (testResult.expectedPath) {
              const expectedOptimized = path.join(optimizedDir, `expected-${index}.png`);
              if (optimizeImage(testResult.expectedPath, expectedOptimized)) {
                expectedBase64 = imageToBase64(expectedOptimized);
              }
            }
            
            if (testResult.actualPath) {
              const actualOptimized = path.join(optimizedDir, `actual-${index}.png`);
              if (optimizeImage(testResult.actualPath, actualOptimized)) {
                actualBase64 = imageToBase64(actualOptimized);
              }
            }
            
            if (testResult.diffPath) {
              const diffOptimized = path.join(optimizedDir, `diff-${index}.png`);
              if (optimizeImage(testResult.diffPath, diffOptimized)) {
                diffBase64 = imageToBase64(diffOptimized);
              }
            }
            
            console.log(`Base64 결과:`);
            console.log(`  - Expected: ${expectedBase64 ? 'OK' : 'FAIL'}`);
            console.log(`  - Actual: ${actualBase64 ? 'OK' : 'FAIL'}`);
            console.log(`  - Diff: ${diffBase64 ? 'OK' : 'FAIL'}`);
            
            if (!actualBase64) {
              console.log('실제 이미지가 없어서 HTML 생성 건너뜀');
              return '';
            }
            
            const containerId = `comparison-${index}`;
            
            const html = `
          <details>
          <summary><strong>${testResult.testName}</strong></summary>
          
          <div id="${containerId}" style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
            <div style="margin: 10px 0;">
              <button onclick="showComparison${index}('two-up')" class="tab-btn-${index}" data-active="true" style="padding: 8px 16px; margin-right: 5px; background: #0366d6; color: white; border: none; border-radius: 4px; cursor: pointer;">2-Up</button>
              <button onclick="showComparison${index}('swipe')" class="tab-btn-${index}" style="padding: 8px 16px; margin-right: 5px; background: #f1f3f4; color: #586069; border: none; border-radius: 4px; cursor: pointer;">Swipe</button>
              <button onclick="showComparison${index}('onion-skin')" class="tab-btn-${index}" style="padding: 8px 16px; background: #f1f3f4; color: #586069; border: none; border-radius: 4px; cursor: pointer;">Onion Skin</button>
            </div>
            
            <!-- 2-Up 비교 -->
            <div id="two-up-${index}" class="comparison-content-${index}" style="display: block;">
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 10px 0;">
                ${expectedBase64 ? `
                <div style="text-align: center;">
                  <h4 style="margin-bottom: 10px; color: #24292e;">Expected</h4>
                  <img src="${expectedBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Expected">
                </div>` : ''}
                <div style="text-align: center;">
                  <h4 style="margin-bottom: 10px; color: #24292e;">Actual</h4>
                  <img src="${actualBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Actual">
                </div>
              </div>
              ${diffBase64 ? `
              <div style="text-align: center; margin-top: 20px;">
                <h4 style="margin-bottom: 10px; color: #24292e;">Difference</h4>
                <img src="${diffBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Difference">
              </div>` : ''}
            </div>
            
            <!-- Swipe 비교 -->
            <div id="swipe-${index}" class="comparison-content-${index}" style="display: none;">
              <div style="position: relative; overflow: hidden; border: 1px solid #d1d5da; border-radius: 4px; max-width: 100%;">
                <img src="${expectedBase64 || actualBase64}" style="display: block; width: 100%; height: auto;" alt="Expected">
                <div id="swipe-overlay-${index}" style="position: absolute; top: 0; left: 0; width: 50%; height: 100%; overflow: hidden; z-index: 2;">
                  <img src="${actualBase64}" style="width: 200%; height: 100%; object-fit: cover;" alt="Actual">
                </div>
                <div id="swipe-handle-${index}" style="position: absolute; top: 0; left: 50%; width: 4px; height: 100%; background: #0366d6; cursor: ew-resize; z-index: 3; transform: translateX(-50%);">
                  <div style="position: absolute; top: 50%; left: 50%; width: 20px; height: 20px; background: #0366d6; border-radius: 50%; transform: translate(-50%, -50%);"></div>
                </div>
              </div>
            </div>
            
            <!-- Onion Skin 비교 -->
            <div id="onion-skin-${index}" class="comparison-content-${index}" style="display: none;">
              <div style="position: relative; border: 1px solid #d1d5da; border-radius: 4px;">
                <img src="${expectedBase64 || actualBase64}" style="display: block; width: 100%; height: auto;" alt="Expected">
                <img id="overlay-image-${index}" src="${actualBase64}" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0.5;" alt="Actual">
              </div>
              <div style="margin: 20px 0;">
                <input type="range" min="0" max="100" value="50" id="opacity-slider-${index}" style="width: 100%; height: 6px; border-radius: 3px; background: #d1d5da; outline: none; -webkit-appearance: none;">
                <p style="text-align: center; margin-top: 10px; color: #586069;">
                  투명도: <span id="opacity-value-${index}">50</span>%
                </p>
              </div>
            </div>
          </div>
          
          <script>
            function showComparison${index}(type) {
              // 모든 탭 버튼 스타일 리셋
              document.querySelectorAll('.tab-btn-${index}').forEach(btn => {
                btn.style.background = '#f1f3f4';
                btn.style.color = '#586069';
                btn.removeAttribute('data-active');
              });
              
              // 모든 컨텐츠 숨기기
              document.querySelectorAll('.comparison-content-${index}').forEach(content => {
                content.style.display = 'none';
              });
              
              // 선택된 탭 활성화
              event.target.style.background = '#0366d6';
              event.target.style.color = 'white';
              event.target.setAttribute('data-active', 'true');
              
              // 선택된 컨텐츠 표시
              document.getElementById(type + '-${index}').style.display = 'block';
              
              // Swipe 기능 초기화
              if (type === 'swipe') {
                initSwipe${index}();
              }
            }
            
            function initSwipe${index}() {
              const overlay = document.getElementById('swipe-overlay-${index}');
              const handle = document.getElementById('swipe-handle-${index}');
              const container = handle.parentElement;
              
              let isDragging = false;
              
              function updateSwipe(clientX) {
                const rect = container.getBoundingClientRect();
                const x = clientX - rect.left;
                const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));
                
                overlay.style.width = percentage + '%';
                handle.style.left = percentage + '%';
              }
              
              handle.onmousedown = (e) => {
                isDragging = true;
                e.preventDefault();
              };
              
              document.onmousemove = (e) => {
                if (isDragging) {
                  updateSwipe(e.clientX);
                }
              };
              
              document.onmouseup = () => {
                isDragging = false;
              };
            }
            
            // Onion Skin 투명도 슬라이더
            const opacitySlider${index} = document.getElementById('opacity-slider-${index}');
            const overlayImage${index} = document.getElementById('overlay-image-${index}');
            const opacityValue${index} = document.getElementById('opacity-value-${index}');
            
            if (opacitySlider${index} && overlayImage${index} && opacityValue${index}) {
              opacitySlider${index}.oninput = (e) => {
                const opacity = e.target.value / 100;
                overlayImage${index}.style.opacity = opacity;
                opacityValue${index}.textContent = e.target.value;
              };
            }
          </script>
          </details>
          `;
          
          console.log(`HTML 생성 완료 (길이: ${html.length}자)`);
          return html;
          }
          
          // 메인 실행
          console.log('🔍 테스트 결과 찾는 중...');
          const testResults = findTestResults();
          
          if (testResults.length === 0) {
            console.log('✅ 시각적 변경사항이 없습니다!');
            
            // 성공 메시지 댓글 생성
            const successComment = `## 🎭 Visual Regression Report

          ✅ **모든 시각적 테스트가 통과했습니다!**

          📋 **세부 정보:**
          - 커밋: \`${context.sha.substring(0, 7)}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
            // 기존 댓글 찾기 및 업데이트/생성
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🎭 Visual Regression Report') &&
              comment.user.login === 'github-actions[bot]'
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: successComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: successComment
              });
            }
            
            return;
          }
          
          console.log(`📸 ${testResults.length}개의 시각적 변경사항을 발견했습니다.`);
          
          const commitSha = context.sha.substring(0, 7);
          const runId = context.runId;
          const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
          
          let commentBody = `## 🎭 Visual Regression Report

          ⚠️ **${testResults.length}개의 시각적 변경사항이 발견되었습니다.**

          📋 **세부 정보:**
          - 커밋: \`${commitSha}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ## 📸 변경된 스크린샷

          각 항목을 클릭하여 **2-Up**, **Swipe**, **Onion Skin** 3가지 방식으로 이미지를 비교할 수 있습니다:

          `;
          
          // 각 테스트 결과에 대한 HTML 생성
          let totalHtmlLength = 0;
          testResults.forEach((result, index) => {
            console.log(`\n최적화된 이미지 생성 중: ${result.testName}`);
            const html = generateInteractiveHTML(result, index);
            commentBody += html;
            totalHtmlLength += html.length;
            console.log(`현재 총 HTML 길이: ${totalHtmlLength}자`);
          });
          
          commentBody += `

          ## 📁 다운로드

          [📦 전체 Visual Report 및 원본 이미지 다운로드](${artifactUrl})

          > 💡 **참고**: 댓글 크기 제한으로 인해 이미지 품질이 최적화되었습니다. 원본 고화질 이미지는 위 링크에서 다운로드하세요.

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
          console.log(`\n최종 댓글 길이: ${commentBody.length}자`);
          
          // 기존 댓글 찾기
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🎭 Visual Regression Report') &&
            comment.user.login === 'github-actions[bot]'
          );
          
          if (existingComment) {
            // 기존 댓글 업데이트
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 업데이트되었습니다!');
          } else {
            // 새 댓글 생성
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 생성되었습니다!');
          } 