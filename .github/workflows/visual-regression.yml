name: Visual Regression Testing

on:
  # PR 생성 및 업데이트시 실행
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run Playwright tests
      run: npx playwright test
        
    - name: Upload visual comparison results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-comparison-report
        path: |
          test-results/**/*.png
          test-results/**/*-diff.png
        retention-days: 30

    - name: Generate Thumbnails and Post PR Comment
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          // 썸네일 생성 함수 (ImageMagick 사용)
          function createThumbnail(inputPath, outputPath, maxWidth = 400) {
            try {
              execSync(`convert "${inputPath}" -resize ${maxWidth}x -quality 70 "${outputPath}"`);
              return fs.existsSync(outputPath);
            } catch (error) {
              console.log(`썸네일 생성 실패: ${inputPath} - ${error.message}`);
              return false;
            }
          }
          
          // Base64로 이미지를 인코딩하는 함수
          function imageToBase64(imagePath) {
            if (!fs.existsSync(imagePath)) {
              return null;
            }
            const imageBuffer = fs.readFileSync(imagePath);
            return `data:image/png;base64,${imageBuffer.toString('base64')}`;
          }
          
          // 테스트 결과 찾기
          function findTestResults() {
            const testResultsDir = 'test-results';
            const results = [];
            
            if (!fs.existsSync(testResultsDir)) {
              return results;
            }
            
            const testDirs = fs.readdirSync(testResultsDir)
              .filter(dir => fs.statSync(path.join(testResultsDir, dir)).isDirectory());
            
            for (const testDir of testDirs) {
              const testPath = path.join(testResultsDir, testDir);
              const files = fs.readdirSync(testPath);
              
              const screenshots = files.filter(file => 
                file.endsWith('.png') && !file.includes('-previous') && !file.includes('-diff')
              );
              
              for (const screenshot of screenshots) {
                const baseName = screenshot.replace('.png', '');
                const expectedPath = path.join('e2e', `${testDir}.test.ts-snapshots`, screenshot);
                const actualPath = path.join(testPath, screenshot);
                const diffPath = path.join(testPath, `${baseName}-diff.png`);
                
                const hasDiff = fs.existsSync(diffPath);
                
                if (hasDiff || !fs.existsSync(expectedPath)) {
                  results.push({
                    testName: `${testDir} - ${baseName}`,
                    expectedPath: fs.existsSync(expectedPath) ? expectedPath : null,
                    actualPath: actualPath,
                    diffPath: hasDiff ? diffPath : null,
                    hasChanges: true
                  });
                }
              }
            }
            
            return results;
          }
          
          // 썸네일 HTML 생성
          function generateThumbnailHTML(testResult, index, runId, repoInfo) {
            // 썸네일 디렉토리 생성
            const thumbnailDir = 'thumbnails';
            if (!fs.existsSync(thumbnailDir)) {
              fs.mkdirSync(thumbnailDir, { recursive: true });
            }
            
            const artifactUrl = `https://github.com/${repoInfo.owner}/${repoInfo.repo}/actions/runs/${runId}`;
            
            let thumbnailHtml = `
          <details>
          <summary><strong>📸 ${testResult.testName}</strong></summary>
          
          <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 15px 0;">
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 10px 0;">`;
            
            // Expected 이미지 썸네일
            if (testResult.expectedPath) {
              const expectedThumbnail = path.join(thumbnailDir, `expected-${index}.png`);
              if (createThumbnail(testResult.expectedPath, expectedThumbnail)) {
                const expectedBase64 = imageToBase64(expectedThumbnail);
                if (expectedBase64) {
                  thumbnailHtml += `
                  <div style="text-align: center;">
                    <h4 style="margin-bottom: 10px; color: #24292e;">Expected</h4>
                    <img src="${expectedBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Expected">
                  </div>`;
                }
              }
            }
            
            // Actual 이미지 썸네일
            const actualThumbnail = path.join(thumbnailDir, `actual-${index}.png`);
            if (createThumbnail(testResult.actualPath, actualThumbnail)) {
              const actualBase64 = imageToBase64(actualThumbnail);
              if (actualBase64) {
                thumbnailHtml += `
                <div style="text-align: center;">
                  <h4 style="margin-bottom: 10px; color: #24292e;">Actual</h4>
                  <img src="${actualBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Actual">
                </div>`;
              }
            }
            
            thumbnailHtml += `
            </div>`;
            
            // Diff 이미지 썸네일
            if (testResult.diffPath) {
              const diffThumbnail = path.join(thumbnailDir, `diff-${index}.png`);
              if (createThumbnail(testResult.diffPath, diffThumbnail)) {
                const diffBase64 = imageToBase64(diffThumbnail);
                if (diffBase64) {
                  thumbnailHtml += `
                  <div style="text-align: center; margin-top: 15px;">
                    <h4 style="margin-bottom: 10px; color: #24292e;">Difference</h4>
                    <img src="${diffBase64}" style="max-width: 100%; border: 1px solid #d1d5da; border-radius: 4px;" alt="Difference">
                  </div>`;
                }
              }
            }
            
            thumbnailHtml += `
            <div style="margin: 20px 0; padding: 15px; background: #f6f8fa; border-radius: 6px; text-align: center;">
              <p style="margin: 0 0 10px 0; color: #586069;">👆 위는 축소된 썸네일입니다.</p>
              <a href="${artifactUrl}" style="display: inline-block; padding: 8px 16px; background: #0366d6; color: white; text-decoration: none; border-radius: 4px; font-weight: 500;">🔍 원본 이미지 다운로드</a>
            </div>
          </div>
          </details>
          `;
            
            return thumbnailHtml;
          }
          
          // 메인 실행
          console.log('🔍 테스트 결과 찾는 중...');
          const testResults = findTestResults();
          
          if (testResults.length === 0) {
            console.log('✅ 시각적 변경사항이 없습니다!');
            
            // 성공 메시지 댓글 생성
            const successComment = `## 🎭 Visual Regression Report

          ✅ **모든 시각적 테스트가 통과했습니다!**

          📋 **세부 정보:**
          - 커밋: \`${context.sha.substring(0, 7)}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
            // 기존 댓글 찾기 및 업데이트/생성
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🎭 Visual Regression Report') &&
              comment.user.login === 'github-actions[bot]'
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: successComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: successComment
              });
            }
            
            return;
          }
          
          console.log(`📸 ${testResults.length}개의 시각적 변경사항을 발견했습니다.`);
          
          const commitSha = context.sha.substring(0, 7);
          const runId = context.runId;
          const repoInfo = { owner: context.repo.owner, repo: context.repo.repo };
          const artifactUrl = `https://github.com/${repoInfo.owner}/${repoInfo.repo}/actions/runs/${runId}`;
          
          let commentBody = `## 🎭 Visual Regression Report

          ⚠️ **${testResults.length}개의 시각적 변경사항이 발견되었습니다.**

          📋 **세부 정보:**
          - 커밋: \`${commitSha}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ## 📸 변경된 스크린샷

          `;
          
          // 각 테스트 결과에 대한 썸네일 HTML 생성
          testResults.forEach((result, index) => {
            console.log(`썸네일 생성 중: ${result.testName}`);
            commentBody += generateThumbnailHTML(result, index, runId, repoInfo);
          });
          
          commentBody += `

          ## 📁 다운로드

          [📦 전체 Visual Report 및 원본 이미지 다운로드](${artifactUrl})

          > 💡 **사용법**: 위의 각 항목을 펼쳐서 썸네일을 확인한 후, "원본 이미지 다운로드" 버튼을 클릭하여 아티팩트에서 고해상도 원본 이미지를 다운로드하세요.

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
          // 기존 댓글 찾기
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🎭 Visual Regression Report') &&
            comment.user.login === 'github-actions[bot]'
          );
          
          if (existingComment) {
            // 기존 댓글 업데이트
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 업데이트되었습니다!');
          } else {
            // 새 댓글 생성
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 생성되었습니다!');
          } 