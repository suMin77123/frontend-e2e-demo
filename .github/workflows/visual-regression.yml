name: Visual Regression Testing

on:
  # PR 생성 및 업데이트시 실행
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert -version
      
    - name: Run Playwright tests
      run: npx playwright test
        
    - name: Upload visual comparison results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-comparison-report
        path: |
          test-results/**/*.png
          test-results/**/*-diff.png
        retention-days: 30

    - name: Generate Optimized Visual Report and Post PR Comment
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          
          // 이미지 최적화 함수 (ImageMagick 사용)
          function optimizeImage(inputPath, outputPath, maxWidth = 600, quality = 50) {
            try {
              console.log(`이미지 최적화 시도: ${inputPath} -> ${outputPath}`);
              execSync(`convert "${inputPath}" -resize ${maxWidth}x -quality ${quality} -strip "${outputPath}"`, { stdio: 'inherit' });
              const success = fs.existsSync(outputPath);
              console.log(`최적화 결과: ${success ? '성공' : '실패'}`);
              return success;
            } catch (error) {
              console.error(`이미지 최적화 실패: ${inputPath} - ${error.message}`);
              return false;
            }
          }
          
          // Base64로 이미지를 인코딩하는 함수
          function imageToBase64(imagePath) {
            if (!fs.existsSync(imagePath)) {
              console.log(`이미지 파일이 존재하지 않음: ${imagePath}`);
              return null;
            }
            try {
              const imageBuffer = fs.readFileSync(imagePath);
              const base64 = `data:image/png;base64,${imageBuffer.toString('base64')}`;
              console.log(`Base64 인코딩 성공: ${imagePath} (${Math.round(base64.length/1024)}KB)`);
              return base64;
            } catch (error) {
              console.error(`Base64 인코딩 실패: ${imagePath} - ${error.message}`);
              return null;
            }
          }
          
          // 테스트 결과 찾기
          function findTestResults() {
            const testResultsDir = 'test-results';
            const results = [];
            
            console.log(`테스트 결과 디렉토리 확인: ${testResultsDir}`);
            if (!fs.existsSync(testResultsDir)) {
              console.log('test-results 디렉토리가 존재하지 않습니다.');
              return results;
            }
            
            const testDirs = fs.readdirSync(testResultsDir)
              .filter(dir => fs.statSync(path.join(testResultsDir, dir)).isDirectory());
            
            console.log(`발견된 테스트 디렉토리들: ${testDirs.join(', ')}`);
            
            for (const testDir of testDirs) {
              const testPath = path.join(testResultsDir, testDir);
              const files = fs.readdirSync(testPath);
              
              console.log(`${testDir} 디렉토리의 파일들: ${files.join(', ')}`);
              
              const screenshots = files.filter(file => 
                file.endsWith('.png') && !file.includes('-previous') && !file.includes('-diff')
              );
              
              for (const screenshot of screenshots) {
                const baseName = screenshot.replace('.png', '');
                const expectedPath = path.join('e2e', `${testDir}.test.ts-snapshots`, screenshot);
                const actualPath = path.join(testPath, screenshot);
                const diffPath = path.join(testPath, `${baseName}-diff.png`);
                
                console.log(`스크린샷 분석:`);
                console.log(`  - Expected: ${expectedPath} (존재: ${fs.existsSync(expectedPath)})`);
                console.log(`  - Actual: ${actualPath} (존재: ${fs.existsSync(actualPath)})`);
                console.log(`  - Diff: ${diffPath} (존재: ${fs.existsSync(diffPath)})`);
                
                const hasDiff = fs.existsSync(diffPath);
                
                if (hasDiff || !fs.existsSync(expectedPath)) {
                  results.push({
                    testName: `${testDir} - ${baseName}`,
                    expectedPath: fs.existsSync(expectedPath) ? expectedPath : null,
                    actualPath: actualPath,
                    diffPath: hasDiff ? diffPath : null,
                    hasChanges: true
                  });
                  console.log(`변경사항 추가: ${testDir} - ${baseName}`);
                }
              }
            }
            
            return results;
          }
          
          // 간단한 이미지 갤러리 HTML 생성 (JavaScript 없음)
          function generateInteractiveHTML(testResult, index) {
            console.log(`\n=== ${testResult.testName} HTML 생성 시작 ===`);
            
            // 최적화된 이미지 디렉토리 생성
            const optimizedDir = 'optimized-images';
            if (!fs.existsSync(optimizedDir)) {
              fs.mkdirSync(optimizedDir, { recursive: true });
              console.log(`최적화 디렉토리 생성: ${optimizedDir}`);
            }
            
            // 이미지 최적화 및 Base64 인코딩
            let expectedBase64 = null;
            let actualBase64 = null;
            let diffBase64 = null;
            
            if (testResult.expectedPath) {
              const expectedOptimized = path.join(optimizedDir, `expected-${index}.png`);
              if (optimizeImage(testResult.expectedPath, expectedOptimized)) {
                expectedBase64 = imageToBase64(expectedOptimized);
              }
            }
            
            if (testResult.actualPath) {
              const actualOptimized = path.join(optimizedDir, `actual-${index}.png`);
              if (optimizeImage(testResult.actualPath, actualOptimized)) {
                actualBase64 = imageToBase64(actualOptimized);
              }
            }
            
            if (testResult.diffPath) {
              const diffOptimized = path.join(optimizedDir, `diff-${index}.png`);
              if (optimizeImage(testResult.diffPath, diffOptimized)) {
                diffBase64 = imageToBase64(diffOptimized);
              }
            }
            
            console.log(`Base64 결과:`);
            console.log(`  - Expected: ${expectedBase64 ? 'OK' : 'FAIL'}`);
            console.log(`  - Actual: ${actualBase64 ? 'OK' : 'FAIL'}`);
            console.log(`  - Diff: ${diffBase64 ? 'OK' : 'FAIL'}`);
            
            if (!actualBase64) {
              console.log('실제 이미지가 없어서 HTML 생성 건너뜀');
              return '';
            }
            
            // 간단한 HTML 생성
            let html = '';
            html += '<details>\n';
            html += '<summary><strong>🖼️ ' + testResult.testName + '</strong></summary>\n\n';
            
            // 나란히 비교
            html += '<h4>📊 나란히 비교</h4>\n';
            html += '<table style="width: 100%; border-collapse: collapse;">\n';
            html += '<tr>\n';
            
            if (expectedBase64) {
              html += '<td style="width: 50%; text-align: center; padding: 10px; vertical-align: top;">\n';
              html += '<h5 style="color: #28a745;">✅ 예상 결과 (Expected)</h5>\n';
              html += '<img src="' + expectedBase64 + '" style="max-width: 100%; border: 2px solid #28a745; border-radius: 4px;" alt="Expected">\n';
              html += '</td>\n';
            }
            
            html += '<td style="width: 50%; text-align: center; padding: 10px; vertical-align: top;">\n';
            html += '<h5 style="color: #d73a49;">🔴 실제 결과 (Actual)</h5>\n';
            html += '<img src="' + actualBase64 + '" style="max-width: 100%; border: 2px solid #d73a49; border-radius: 4px;" alt="Actual">\n';
            html += '</td>\n';
            html += '</tr>\n';
            html += '</table>\n\n';
            
            // 차이점 표시
            if (diffBase64) {
              html += '<h4>⚡ 차이점 하이라이트</h4>\n';
              html += '<div style="text-align: center; margin: 20px 0;">\n';
              html += '<img src="' + diffBase64 + '" style="max-width: 100%; border: 2px solid #f39c12; border-radius: 4px;" alt="Difference">\n';
              html += '<p><em>빨간색으로 표시된 영역이 변경된 부분입니다.</em></p>\n';
              html += '</div>\n\n';
            }
            
            // 전후 비교 (세로 배치)
            if (expectedBase64) {
              html += '<h4>🔄 전후 비교</h4>\n';
              html += '<div style="text-align: center;">\n';
              
              html += '<div style="margin-bottom: 20px;">\n';
              html += '<h5 style="color: #28a745;">👆 변경 전 (Expected)</h5>\n';
              html += '<img src="' + expectedBase64 + '" style="max-width: 100%; border: 2px solid #28a745; border-radius: 4px; opacity: 0.8;" alt="Before">\n';
              html += '</div>\n';
              
              html += '<div style="margin: 20px 0; font-size: 24px;">⬇️</div>\n';
              
              html += '<div>\n';
              html += '<h5 style="color: #d73a49;">👇 변경 후 (Actual)</h5>\n';
              html += '<img src="' + actualBase64 + '" style="max-width: 100%; border: 2px solid #d73a49; border-radius: 4px;" alt="After">\n';
              html += '</div>\n';
              html += '</div>\n\n';
            } else {
              html += '<div style="background: #fff3cd; padding: 12px; border-radius: 4px; border-left: 4px solid #ffc107; margin: 15px 0;">\n';
              html += '⚠️ <strong>새로운 테스트 케이스:</strong> 기존 스크린샷이 없습니다.\n';
              html += '</div>\n';
            }
            
            html += '</details>\n';
            
            console.log(`HTML 생성 완료 (길이: ${html.length}자)`);
            return html;
          }
          
          // 메인 실행
          console.log('🔍 테스트 결과 찾는 중...');
          const testResults = findTestResults();
          
          if (testResults.length === 0) {
            console.log('✅ 시각적 변경사항이 없습니다!');
            
            // 성공 메시지 댓글 생성
            const successComment = `## 🎭 Visual Regression Report

          ✅ **모든 시각적 테스트가 통과했습니다!**

          📋 **세부 정보:**
          - 커밋: \`${context.sha.substring(0, 7)}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
            // 기존 댓글 찾기 및 업데이트/생성
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🎭 Visual Regression Report') &&
              comment.user.login === 'github-actions[bot]'
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: successComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: successComment
              });
            }
            
            return;
          }
          
          console.log(`📸 ${testResults.length}개의 시각적 변경사항을 발견했습니다.`);
          
          const commitSha = context.sha.substring(0, 7);
          const runId = context.runId;
          const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
          
          let commentBody = `## 🎭 Visual Regression Report

          ⚠️ **${testResults.length}개의 시각적 변경사항이 발견되었습니다.**

          📋 **세부 정보:**
          - 커밋: \`${commitSha}\`
          - 검사 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}

          ## 📸 변경된 스크린샷

          각 항목을 클릭하면 **나란히 비교**, **차이점 하이라이트**, **전후 비교** 형태로 이미지 변경사항을 확인할 수 있습니다:

          `;
          
          // 각 테스트 결과에 대한 HTML 생성
          let totalHtmlLength = 0;
          testResults.forEach((result, index) => {
            console.log(`\n최적화된 이미지 생성 중: ${result.testName}`);
            const html = generateInteractiveHTML(result, index);
            commentBody += html;
            totalHtmlLength += html.length;
            console.log(`현재 총 HTML 길이: ${totalHtmlLength}자`);
          });
          
          commentBody += `

          ## 📁 다운로드

          [📦 전체 Visual Report 및 원본 이미지 다운로드](${artifactUrl})

          > 💡 **사용법**: 
          > - 📊 **나란히 비교**: 예상 결과와 실제 결과를 나란히 확인
          > - ⚡ **차이점 하이라이트**: 변경된 부분을 빨간색으로 표시
          > - 🔄 **전후 비교**: 변경 전과 후의 모습을 위아래로 배치
          > 
          > 📝 **참고**: 댓글 크기 제한으로 인해 이미지 품질이 최적화되었습니다. 원본 고화질 이미지는 위 링크에서 다운로드하세요.

          ---
          *이 댓글은 GitHub Actions에 의해 자동으로 생성되었습니다.*`;
          
          console.log(`\n최종 댓글 길이: ${commentBody.length}자`);
          
          // 기존 댓글 찾기
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🎭 Visual Regression Report') &&
            comment.user.login === 'github-actions[bot]'
          );
          
          if (existingComment) {
            // 기존 댓글 업데이트
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 업데이트되었습니다!');
          } else {
            // 새 댓글 생성
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            console.log('✅ 댓글이 성공적으로 생성되었습니다!');
          } 