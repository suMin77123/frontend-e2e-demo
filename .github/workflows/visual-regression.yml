name: Visual Regression Testing

on:
  # PR 생성 및 업데이트시 실행
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

# 권한 설정 추가
permissions:
  contents: read
  issues: write
  pull-requests: write
  
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # 워크플로우 시작 시간 설정
    - name: Set workflow start time
      id: start_time
      run: |
        START_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        echo "workflow_started_at=${START_TIME}" >> $GITHUB_OUTPUT
        echo "Started at: ${START_TIME}"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund
      
    # 브랜치명 설정
    - name: Set branch name
      id: branch
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
        else
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: cache-playwright-browsers
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-browsers-

    - name: Cache Playwright system dependencies marker
      uses: actions/cache@v4
      id: cache-playwright-system-deps
      with:
        path: ~/.cache/playwright-deps-installed
        key: ${{ runner.os }}-playwright-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-deps-

    - name: Install Playwright browsers
      if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
      run: npx playwright install
      
    - name: Install Playwright system dependencies
      if: steps.cache-playwright-system-deps.outputs.cache-hit != 'true'
      run: |
        npx playwright install-deps
        mkdir -p ~/.cache
        echo "$(date)" > ~/.cache/playwright-deps-installed
      
    - name: Run Playwright tests
      run: npx playwright test --reporter=html

    # 성공/실패 여부와 관계없이 HTML 리포트 업로드 (2-up, Swipe, Onion Skin 지원)
    - name: Upload Playwright HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload visual comparison results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: visual-comparison-diffs
        path: |
          test-results/**/*.png
          test-results/**/*-diff.png
          test-results/**/*-actual.png
          test-results/**/*-expected.png
        retention-days: 30

    # MinIO에 리포트 업로드
    - name: Cache MinIO Client
      if: always()
      uses: actions/cache@v4
      id: cache-minio-client
      with:
        path: /usr/local/bin/mc
        key: ${{ runner.os }}-minio-client
        restore-keys: |
          ${{ runner.os }}-minio-

    - name: Setup MinIO Client
      if: always() && steps.cache-minio-client.outputs.cache-hit != 'true'
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        echo "MinIO Client (mc) has been installed successfully!"

    - name: Upload to MinIO
      if: always()
      run: |
        mc alias set --insecure pia http://macs.pia.space:32702 ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
        mc cp --recursive playwright-report pia/frontend-e2e-demo/${{ steps.branch.outputs.branch_name }}/${{ steps.start_time.outputs.workflow_started_at }}/
        mc cp --recursive test-results pia/frontend-e2e-demo/${{ steps.branch.outputs.branch_name }}/${{ steps.start_time.outputs.workflow_started_at }}/
        mc anonymous set download pia/frontend-e2e-demo/${{ steps.branch.outputs.branch_name }}/

    # PR에 코멘트 추가
    - name: Comment PR with report link
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = '${{ steps.branch.outputs.branch_name }}';
          const startedAt = '${{ steps.start_time.outputs.workflow_started_at }}';
          const reportUrl = `http://macs.pia.space:32702/frontend-e2e-demo/${branchName}/${startedAt}/playwright-report/index.html`;
          
          const comment = `## 📸 Visual Regression Test Report
          
          리포트가 생성되었습니다: [테스트 리포트 보기](${reportUrl})
          
          🔍 리포트에서 다음을 확인할 수 있습니다:
          - 스크린샷 비교 결과
          - 실패한 테스트의 Before/After 비교
          - Diff, Side-by-Side, Slider 뷰 지원
          
          브랜치: \`${branchName}\`
          리포트 생성 시간: ${new Date(startedAt).toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}
          
          ✋🏻 의도된 변경 사항이라면?
          Labels에 \`Intended-Changes\` 라벨을 추가해주세요.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });